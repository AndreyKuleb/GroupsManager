/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.bmstu.groups.manager.core.service.base;

import aQute.bnd.annotation.ProviderType;

import com.bmstu.groups.manager.core.model.TraccarGroup;
import com.bmstu.groups.manager.core.service.TraccarGroupLocalService;
import com.bmstu.groups.manager.core.service.persistence.TraccarGroupPersistence;

import com.liferay.exportimport.kernel.lar.ExportImportHelperUtil;
import com.liferay.exportimport.kernel.lar.ManifestSummary;
import com.liferay.exportimport.kernel.lar.PortletDataContext;
import com.liferay.exportimport.kernel.lar.StagedModelDataHandler;
import com.liferay.exportimport.kernel.lar.StagedModelDataHandlerRegistryUtil;
import com.liferay.exportimport.kernel.lar.StagedModelDataHandlerUtil;
import com.liferay.exportimport.kernel.lar.StagedModelType;

import com.liferay.portal.kernel.bean.BeanReference;
import com.liferay.portal.kernel.dao.db.DB;
import com.liferay.portal.kernel.dao.db.DBManagerUtil;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdate;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdateFactoryUtil;
import com.liferay.portal.kernel.dao.orm.ActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.Criterion;
import com.liferay.portal.kernel.dao.orm.DefaultActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.Disjunction;
import com.liferay.portal.kernel.dao.orm.DynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQueryFactoryUtil;
import com.liferay.portal.kernel.dao.orm.ExportActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.IndexableActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.Projection;
import com.liferay.portal.kernel.dao.orm.Property;
import com.liferay.portal.kernel.dao.orm.PropertyFactoryUtil;
import com.liferay.portal.kernel.dao.orm.RestrictionsFactoryUtil;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.model.PersistedModel;
import com.liferay.portal.kernel.module.framework.service.IdentifiableOSGiService;
import com.liferay.portal.kernel.search.Indexable;
import com.liferay.portal.kernel.search.IndexableType;
import com.liferay.portal.kernel.service.BaseLocalServiceImpl;
import com.liferay.portal.kernel.service.PersistedModelLocalServiceRegistry;
import com.liferay.portal.kernel.service.persistence.ClassNamePersistence;
import com.liferay.portal.kernel.service.persistence.UserPersistence;
import com.liferay.portal.kernel.util.OrderByComparator;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.kernel.workflow.WorkflowConstants;
import com.liferay.portal.spring.extender.service.ServiceReference;

import java.io.Serializable;

import java.util.List;

import javax.sql.DataSource;

/**
 * Provides the base implementation for the traccar group local service.
 *
 * <p>
 * This implementation exists only as a container for the default service methods generated by ServiceBuilder. All custom service methods should be put in {@link com.bmstu.groups.manager.core.service.impl.TraccarGroupLocalServiceImpl}.
 * </p>
 *
 * @author Kylebyakin
 * @see com.bmstu.groups.manager.core.service.impl.TraccarGroupLocalServiceImpl
 * @see com.bmstu.groups.manager.core.service.TraccarGroupLocalServiceUtil
 * @generated
 */
@ProviderType
public abstract class TraccarGroupLocalServiceBaseImpl
	extends BaseLocalServiceImpl implements TraccarGroupLocalService,
		IdentifiableOSGiService {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. Always use {@link com.bmstu.groups.manager.core.service.TraccarGroupLocalServiceUtil} to access the traccar group local service.
	 */

	/**
	 * Adds the traccar group to the database. Also notifies the appropriate model listeners.
	 *
	 * @param traccarGroup the traccar group
	 * @return the traccar group that was added
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public TraccarGroup addTraccarGroup(TraccarGroup traccarGroup) {
		traccarGroup.setNew(true);

		return traccarGroupPersistence.update(traccarGroup);
	}

	/**
	 * Creates a new traccar group with the primary key. Does not add the traccar group to the database.
	 *
	 * @param traccarGroupId the primary key for the new traccar group
	 * @return the new traccar group
	 */
	@Override
	public TraccarGroup createTraccarGroup(long traccarGroupId) {
		return traccarGroupPersistence.create(traccarGroupId);
	}

	/**
	 * Deletes the traccar group with the primary key from the database. Also notifies the appropriate model listeners.
	 *
	 * @param traccarGroupId the primary key of the traccar group
	 * @return the traccar group that was removed
	 * @throws PortalException if a traccar group with the primary key could not be found
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public TraccarGroup deleteTraccarGroup(long traccarGroupId)
		throws PortalException {
		return traccarGroupPersistence.remove(traccarGroupId);
	}

	/**
	 * Deletes the traccar group from the database. Also notifies the appropriate model listeners.
	 *
	 * @param traccarGroup the traccar group
	 * @return the traccar group that was removed
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public TraccarGroup deleteTraccarGroup(TraccarGroup traccarGroup) {
		return traccarGroupPersistence.remove(traccarGroup);
	}

	@Override
	public DynamicQuery dynamicQuery() {
		Class<?> clazz = getClass();

		return DynamicQueryFactoryUtil.forClass(TraccarGroup.class,
			clazz.getClassLoader());
	}

	/**
	 * Performs a dynamic query on the database and returns the matching rows.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(DynamicQuery dynamicQuery) {
		return traccarGroupPersistence.findWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Performs a dynamic query on the database and returns a range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.bmstu.groups.manager.core.model.impl.TraccarGroupModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @return the range of matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(DynamicQuery dynamicQuery, int start,
		int end) {
		return traccarGroupPersistence.findWithDynamicQuery(dynamicQuery,
			start, end);
	}

	/**
	 * Performs a dynamic query on the database and returns an ordered range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.bmstu.groups.manager.core.model.impl.TraccarGroupModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @param orderByComparator the comparator to order the results by (optionally <code>null</code>)
	 * @return the ordered range of matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(DynamicQuery dynamicQuery, int start,
		int end, OrderByComparator<T> orderByComparator) {
		return traccarGroupPersistence.findWithDynamicQuery(dynamicQuery,
			start, end, orderByComparator);
	}

	/**
	 * Returns the number of rows matching the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the number of rows matching the dynamic query
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery) {
		return traccarGroupPersistence.countWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Returns the number of rows matching the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @param projection the projection to apply to the query
	 * @return the number of rows matching the dynamic query
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery,
		Projection projection) {
		return traccarGroupPersistence.countWithDynamicQuery(dynamicQuery,
			projection);
	}

	@Override
	public TraccarGroup fetchTraccarGroup(long traccarGroupId) {
		return traccarGroupPersistence.fetchByPrimaryKey(traccarGroupId);
	}

	/**
	 * Returns the traccar group matching the UUID and group.
	 *
	 * @param uuid the traccar group's UUID
	 * @param groupId the primary key of the group
	 * @return the matching traccar group, or <code>null</code> if a matching traccar group could not be found
	 */
	@Override
	public TraccarGroup fetchTraccarGroupByUuidAndGroupId(String uuid,
		long groupId) {
		return traccarGroupPersistence.fetchByUUID_G(uuid, groupId);
	}

	/**
	 * Returns the traccar group with the primary key.
	 *
	 * @param traccarGroupId the primary key of the traccar group
	 * @return the traccar group
	 * @throws PortalException if a traccar group with the primary key could not be found
	 */
	@Override
	public TraccarGroup getTraccarGroup(long traccarGroupId)
		throws PortalException {
		return traccarGroupPersistence.findByPrimaryKey(traccarGroupId);
	}

	@Override
	public ActionableDynamicQuery getActionableDynamicQuery() {
		ActionableDynamicQuery actionableDynamicQuery = new DefaultActionableDynamicQuery();

		actionableDynamicQuery.setBaseLocalService(traccarGroupLocalService);
		actionableDynamicQuery.setClassLoader(getClassLoader());
		actionableDynamicQuery.setModelClass(TraccarGroup.class);

		actionableDynamicQuery.setPrimaryKeyPropertyName("traccarGroupId");

		return actionableDynamicQuery;
	}

	@Override
	public IndexableActionableDynamicQuery getIndexableActionableDynamicQuery() {
		IndexableActionableDynamicQuery indexableActionableDynamicQuery = new IndexableActionableDynamicQuery();

		indexableActionableDynamicQuery.setBaseLocalService(traccarGroupLocalService);
		indexableActionableDynamicQuery.setClassLoader(getClassLoader());
		indexableActionableDynamicQuery.setModelClass(TraccarGroup.class);

		indexableActionableDynamicQuery.setPrimaryKeyPropertyName(
			"traccarGroupId");

		return indexableActionableDynamicQuery;
	}

	protected void initActionableDynamicQuery(
		ActionableDynamicQuery actionableDynamicQuery) {
		actionableDynamicQuery.setBaseLocalService(traccarGroupLocalService);
		actionableDynamicQuery.setClassLoader(getClassLoader());
		actionableDynamicQuery.setModelClass(TraccarGroup.class);

		actionableDynamicQuery.setPrimaryKeyPropertyName("traccarGroupId");
	}

	@Override
	public ExportActionableDynamicQuery getExportActionableDynamicQuery(
		final PortletDataContext portletDataContext) {
		final ExportActionableDynamicQuery exportActionableDynamicQuery = new ExportActionableDynamicQuery() {
				@Override
				public long performCount() throws PortalException {
					ManifestSummary manifestSummary = portletDataContext.getManifestSummary();

					StagedModelType stagedModelType = getStagedModelType();

					long modelAdditionCount = super.performCount();

					manifestSummary.addModelAdditionCount(stagedModelType,
						modelAdditionCount);

					long modelDeletionCount = ExportImportHelperUtil.getModelDeletionCount(portletDataContext,
							stagedModelType);

					manifestSummary.addModelDeletionCount(stagedModelType,
						modelDeletionCount);

					return modelAdditionCount;
				}
			};

		initActionableDynamicQuery(exportActionableDynamicQuery);

		exportActionableDynamicQuery.setAddCriteriaMethod(new ActionableDynamicQuery.AddCriteriaMethod() {
				@Override
				public void addCriteria(DynamicQuery dynamicQuery) {
					Criterion modifiedDateCriterion = portletDataContext.getDateRangeCriteria(
							"modifiedDate");

					Criterion statusDateCriterion = portletDataContext.getDateRangeCriteria(
							"statusDate");

					if ((modifiedDateCriterion != null) &&
							(statusDateCriterion != null)) {
						Disjunction disjunction = RestrictionsFactoryUtil.disjunction();

						disjunction.add(modifiedDateCriterion);
						disjunction.add(statusDateCriterion);

						dynamicQuery.add(disjunction);
					}

					Property workflowStatusProperty = PropertyFactoryUtil.forName(
							"status");

					if (portletDataContext.isInitialPublication()) {
						dynamicQuery.add(workflowStatusProperty.ne(
								WorkflowConstants.STATUS_IN_TRASH));
					}
					else {
						StagedModelDataHandler<?> stagedModelDataHandler = StagedModelDataHandlerRegistryUtil.getStagedModelDataHandler(TraccarGroup.class.getName());

						dynamicQuery.add(workflowStatusProperty.in(
								stagedModelDataHandler.getExportableStatuses()));
					}
				}
			});

		exportActionableDynamicQuery.setCompanyId(portletDataContext.getCompanyId());

		exportActionableDynamicQuery.setPerformActionMethod(new ActionableDynamicQuery.PerformActionMethod<TraccarGroup>() {
				@Override
				public void performAction(TraccarGroup traccarGroup)
					throws PortalException {
					StagedModelDataHandlerUtil.exportStagedModel(portletDataContext,
						traccarGroup);
				}
			});
		exportActionableDynamicQuery.setStagedModelType(new StagedModelType(
				PortalUtil.getClassNameId(TraccarGroup.class.getName())));

		return exportActionableDynamicQuery;
	}

	/**
	 * @throws PortalException
	 */
	@Override
	public PersistedModel deletePersistedModel(PersistedModel persistedModel)
		throws PortalException {
		return traccarGroupLocalService.deleteTraccarGroup((TraccarGroup)persistedModel);
	}

	@Override
	public PersistedModel getPersistedModel(Serializable primaryKeyObj)
		throws PortalException {
		return traccarGroupPersistence.findByPrimaryKey(primaryKeyObj);
	}

	/**
	 * Returns all the traccar groups matching the UUID and company.
	 *
	 * @param uuid the UUID of the traccar groups
	 * @param companyId the primary key of the company
	 * @return the matching traccar groups, or an empty list if no matches were found
	 */
	@Override
	public List<TraccarGroup> getTraccarGroupsByUuidAndCompanyId(String uuid,
		long companyId) {
		return traccarGroupPersistence.findByUuid_C(uuid, companyId);
	}

	/**
	 * Returns a range of traccar groups matching the UUID and company.
	 *
	 * @param uuid the UUID of the traccar groups
	 * @param companyId the primary key of the company
	 * @param start the lower bound of the range of traccar groups
	 * @param end the upper bound of the range of traccar groups (not inclusive)
	 * @param orderByComparator the comparator to order the results by (optionally <code>null</code>)
	 * @return the range of matching traccar groups, or an empty list if no matches were found
	 */
	@Override
	public List<TraccarGroup> getTraccarGroupsByUuidAndCompanyId(String uuid,
		long companyId, int start, int end,
		OrderByComparator<TraccarGroup> orderByComparator) {
		return traccarGroupPersistence.findByUuid_C(uuid, companyId, start,
			end, orderByComparator);
	}

	/**
	 * Returns the traccar group matching the UUID and group.
	 *
	 * @param uuid the traccar group's UUID
	 * @param groupId the primary key of the group
	 * @return the matching traccar group
	 * @throws PortalException if a matching traccar group could not be found
	 */
	@Override
	public TraccarGroup getTraccarGroupByUuidAndGroupId(String uuid,
		long groupId) throws PortalException {
		return traccarGroupPersistence.findByUUID_G(uuid, groupId);
	}

	/**
	 * Returns a range of all the traccar groups.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.bmstu.groups.manager.core.model.impl.TraccarGroupModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param start the lower bound of the range of traccar groups
	 * @param end the upper bound of the range of traccar groups (not inclusive)
	 * @return the range of traccar groups
	 */
	@Override
	public List<TraccarGroup> getTraccarGroups(int start, int end) {
		return traccarGroupPersistence.findAll(start, end);
	}

	/**
	 * Returns the number of traccar groups.
	 *
	 * @return the number of traccar groups
	 */
	@Override
	public int getTraccarGroupsCount() {
		return traccarGroupPersistence.countAll();
	}

	/**
	 * Updates the traccar group in the database or adds it if it does not yet exist. Also notifies the appropriate model listeners.
	 *
	 * @param traccarGroup the traccar group
	 * @return the traccar group that was updated
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public TraccarGroup updateTraccarGroup(TraccarGroup traccarGroup) {
		return traccarGroupPersistence.update(traccarGroup);
	}

	/**
	 * Returns the traccar group local service.
	 *
	 * @return the traccar group local service
	 */
	public TraccarGroupLocalService getTraccarGroupLocalService() {
		return traccarGroupLocalService;
	}

	/**
	 * Sets the traccar group local service.
	 *
	 * @param traccarGroupLocalService the traccar group local service
	 */
	public void setTraccarGroupLocalService(
		TraccarGroupLocalService traccarGroupLocalService) {
		this.traccarGroupLocalService = traccarGroupLocalService;
	}

	/**
	 * Returns the traccar group persistence.
	 *
	 * @return the traccar group persistence
	 */
	public TraccarGroupPersistence getTraccarGroupPersistence() {
		return traccarGroupPersistence;
	}

	/**
	 * Sets the traccar group persistence.
	 *
	 * @param traccarGroupPersistence the traccar group persistence
	 */
	public void setTraccarGroupPersistence(
		TraccarGroupPersistence traccarGroupPersistence) {
		this.traccarGroupPersistence = traccarGroupPersistence;
	}

	/**
	 * Returns the counter local service.
	 *
	 * @return the counter local service
	 */
	public com.liferay.counter.kernel.service.CounterLocalService getCounterLocalService() {
		return counterLocalService;
	}

	/**
	 * Sets the counter local service.
	 *
	 * @param counterLocalService the counter local service
	 */
	public void setCounterLocalService(
		com.liferay.counter.kernel.service.CounterLocalService counterLocalService) {
		this.counterLocalService = counterLocalService;
	}

	/**
	 * Returns the class name local service.
	 *
	 * @return the class name local service
	 */
	public com.liferay.portal.kernel.service.ClassNameLocalService getClassNameLocalService() {
		return classNameLocalService;
	}

	/**
	 * Sets the class name local service.
	 *
	 * @param classNameLocalService the class name local service
	 */
	public void setClassNameLocalService(
		com.liferay.portal.kernel.service.ClassNameLocalService classNameLocalService) {
		this.classNameLocalService = classNameLocalService;
	}

	/**
	 * Returns the class name persistence.
	 *
	 * @return the class name persistence
	 */
	public ClassNamePersistence getClassNamePersistence() {
		return classNamePersistence;
	}

	/**
	 * Sets the class name persistence.
	 *
	 * @param classNamePersistence the class name persistence
	 */
	public void setClassNamePersistence(
		ClassNamePersistence classNamePersistence) {
		this.classNamePersistence = classNamePersistence;
	}

	/**
	 * Returns the resource local service.
	 *
	 * @return the resource local service
	 */
	public com.liferay.portal.kernel.service.ResourceLocalService getResourceLocalService() {
		return resourceLocalService;
	}

	/**
	 * Sets the resource local service.
	 *
	 * @param resourceLocalService the resource local service
	 */
	public void setResourceLocalService(
		com.liferay.portal.kernel.service.ResourceLocalService resourceLocalService) {
		this.resourceLocalService = resourceLocalService;
	}

	/**
	 * Returns the user local service.
	 *
	 * @return the user local service
	 */
	public com.liferay.portal.kernel.service.UserLocalService getUserLocalService() {
		return userLocalService;
	}

	/**
	 * Sets the user local service.
	 *
	 * @param userLocalService the user local service
	 */
	public void setUserLocalService(
		com.liferay.portal.kernel.service.UserLocalService userLocalService) {
		this.userLocalService = userLocalService;
	}

	/**
	 * Returns the user persistence.
	 *
	 * @return the user persistence
	 */
	public UserPersistence getUserPersistence() {
		return userPersistence;
	}

	/**
	 * Sets the user persistence.
	 *
	 * @param userPersistence the user persistence
	 */
	public void setUserPersistence(UserPersistence userPersistence) {
		this.userPersistence = userPersistence;
	}

	public void afterPropertiesSet() {
		persistedModelLocalServiceRegistry.register("com.bmstu.groups.manager.core.model.TraccarGroup",
			traccarGroupLocalService);
	}

	public void destroy() {
		persistedModelLocalServiceRegistry.unregister(
			"com.bmstu.groups.manager.core.model.TraccarGroup");
	}

	/**
	 * Returns the OSGi service identifier.
	 *
	 * @return the OSGi service identifier
	 */
	@Override
	public String getOSGiServiceIdentifier() {
		return TraccarGroupLocalService.class.getName();
	}

	protected Class<?> getModelClass() {
		return TraccarGroup.class;
	}

	protected String getModelClassName() {
		return TraccarGroup.class.getName();
	}

	/**
	 * Performs a SQL query.
	 *
	 * @param sql the sql query
	 */
	protected void runSQL(String sql) {
		try {
			DataSource dataSource = traccarGroupPersistence.getDataSource();

			DB db = DBManagerUtil.getDB();

			sql = db.buildSQL(sql);
			sql = PortalUtil.transformSQL(sql);

			SqlUpdate sqlUpdate = SqlUpdateFactoryUtil.getSqlUpdate(dataSource,
					sql);

			sqlUpdate.update();
		}
		catch (Exception e) {
			throw new SystemException(e);
		}
	}

	@BeanReference(type = TraccarGroupLocalService.class)
	protected TraccarGroupLocalService traccarGroupLocalService;
	@BeanReference(type = TraccarGroupPersistence.class)
	protected TraccarGroupPersistence traccarGroupPersistence;
	@ServiceReference(type = com.liferay.counter.kernel.service.CounterLocalService.class)
	protected com.liferay.counter.kernel.service.CounterLocalService counterLocalService;
	@ServiceReference(type = com.liferay.portal.kernel.service.ClassNameLocalService.class)
	protected com.liferay.portal.kernel.service.ClassNameLocalService classNameLocalService;
	@ServiceReference(type = ClassNamePersistence.class)
	protected ClassNamePersistence classNamePersistence;
	@ServiceReference(type = com.liferay.portal.kernel.service.ResourceLocalService.class)
	protected com.liferay.portal.kernel.service.ResourceLocalService resourceLocalService;
	@ServiceReference(type = com.liferay.portal.kernel.service.UserLocalService.class)
	protected com.liferay.portal.kernel.service.UserLocalService userLocalService;
	@ServiceReference(type = UserPersistence.class)
	protected UserPersistence userPersistence;
	@ServiceReference(type = PersistedModelLocalServiceRegistry.class)
	protected PersistedModelLocalServiceRegistry persistedModelLocalServiceRegistry;
}